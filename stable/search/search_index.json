{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":true,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Get Started \u00b6 A linter, formatter for finding and removing unused import statements. Installation \u00b6 Unimport requires Python 3.6+ and can be easily installed using most common Python packaging tools. We recommend installing the latest stable release from PyPI with pip: $ pip install unimport Sources \u00b6 (optional: default the file directory you are in ) -> Path(\".\") You can give as many file or directory paths as you want. Usage $ unimport $ unimport example $ unimport example example1 example2 example/example.py Check \u00b6 (optional: default True ) Prints which file the unused imports are in. When the --diff , --permission and --remove flags are used, the --check flag set as False If you still want to see the results, use the --check flag. Usage $ unimport $ unimport --check $ unimport --check --diff $ unimport --check --remove Config \u00b6 (optional: default the file directory you are in ) -> Path(\".\") Read configuration from PATH Usage $ unimport --config path/to/pyproject.toml Include \u00b6 (optional: default \u2018\\.(py)$\u2019) file include pattern Usage $ unimport --include mypackage $ unimport --include \"mypackage|tests Exclude \u00b6 (optional: default \u2018^$\u2019) file exclude pattern Usage $ unimport --exclude __init__.py $ unimport --exclude \"__init__.py|tests|.tox Gitignore \u00b6 (optional: default False ) It\u2019s possible to skip .gitignore glob patterns. Usage $ unimport --gitignore Ignore init \u00b6 (optional: default False ) Ignore the init .py file. Usage $ unimport --ignore-init Include star import \u00b6 (optional: default False ) Include star imports during scanning and refactor. Usage $ unimport --include-star-import Diff \u00b6 (optional: default False ) Prints a diff of all the changes unimport would make to a file. Usage $ unimport -d $ unimport --diff Remove \u00b6 (optional: default False ) remove unused imports automatically. Usage $ unimport -r $ unimport --remove Permission \u00b6 (optional: default False ) Refactor permission after seeing the diff. Usage $ unimport -p $ unimport --permission Requirements \u00b6 (optional: default False ) You can automatically delete unused modules from the requirements.txt file Usage unimport --requirements to check unimport --check --requirements to check unimport --requirements --diff to check and seeing diff unimport --requirements --permission to refactor permission after seeing the diff. unimport --requirements --remove to remove automatically. Typing \u00b6 Unimport can understand that imports are used these cases. from typing import List , Dict def test ( arg : List [ Dict ]) -> None : pass String \u00b6 Unimport supports the following cases from typing import List , Dict def test ( arg : 'List[Dict]' ) -> None : pass from typing import List , Dict def test ( arg : \"List['Dict']\" ) -> None : pass Comments \u00b6 This feature is only available for python 3.8. Imports in the example below aren\u2019t flag as unused by import. from typing import Any from typing import Tuple from typing import Union def function ( a , b ): # type: (Any, str) -> Union[Tuple[None, None], Tuple[str, str]] pass For more information PEP 526 - Syntax for Variable Annotations Skip Import \u00b6 Leave \u2018# unimport: skip\u2019 or \u2018# noqa\u2019 at the end of the line to skip imports for example: import x # unimport:skip from x import ( # noqa t , y , f , r ) If version of your python is 3.8+ Unimport support multiple skip like below. It doesn\u2019t matter which line you put the comment on. from package import ( module , module1 , ) # unimport:skip or from package import ( module , # unimport:skip module1 , ) File Wide Skips \u00b6 To skip a file by typing # unimport: skip_file anywhere in that file for example: # unimport: skip_file import x or import x # unimport: skip_file All \u00b6 Unimport looks at the items in the __all__ list, if it matches the imports, marks it as being used. import os __all__ = [ \"os\" ] # this import is used and umimport can understand Other supported operations, append and extend from os import * __all__ = [] __all__ . append ( \"removedirs\" ) __all__ . extend ([ \"walk\" ]) after refactoring from os import removedirs , walk __all__ = [] __all__ . append ( \"removedirs\" ) __all__ . extend ([ \"walk\" ]) Command line options \u00b6 You can list many options by running unimport \u2013help usage: unimport [-h] [--check] [-c PATH] [--include include] [--exclude exclude] [--gitignore] [--ignore-init] [--include-star-import] [-d] [-r | -p] [--requirements] [-v] [sources [sources ...]] A linter, formatter for finding and removing unused import statements. positional arguments: sources Files and folders to find the unused imports. optional arguments: -h, --help show this help message and exit --check Prints which file the unused imports are in. -c PATH, --config PATH Read configuration from PATH. --include include File include pattern. --exclude exclude File exclude pattern. --gitignore Exclude .gitignore patterns. if present. --ignore-init Ignore the __init__.py file. --include-star-import Include star imports during scanning and refactor. -d, --diff Prints a diff of all the changes unimport would make to a file. -r, --remove Remove unused imports automatically. -p, --permission Refactor permission after see diff. --requirements Include requirements.txt file, You can use it with all other arguments -v, --version Prints version of unimport Get rid of all unused imports \ud83e\udd73 Configuring Unimport \u00b6 It\u2019s possible to configure unimport from pyproject.toml or setup.cfg files if you have. When reading your configurations, it gives priority to the configurations you enter from the console. For example: pyproject.toml [tool.unimport] sources = [\"path1\", \"path2\"] exclude = '__init__.py|tests/' include = 'test|test2|tests.py' gitignore = true requirements = true remove = false diff = true include_star_import = true ignore_init = true setup.cfg [unimport] sources = [\"path1\", \"path2\"] exclude = __init__.py|tests/ include = test|test2|tests.py gitignore = true requirements = true remove = false diff = true include_star_import = true ignore_init = true Adding pre-commit plugins to your project \u00b6 Once you have pre-commit installed , adding pre-commit plugins to your project is done with the .pre-commit-config.yaml configuration file. Add a file called .pre-commit-config.yaml to the root of your project. The pre-commit config file describes what repositories and hooks are installed. repos : - repo : https://github.com/hakancelik96/unimport rev : stable hooks : - id : unimport args : [ --remove , --requirements , --include-star-import , --ignore-init , --gitignore ]","title":"Home"},{"location":"#get-started","text":"A linter, formatter for finding and removing unused import statements.","title":"Get Started"},{"location":"#installation","text":"Unimport requires Python 3.6+ and can be easily installed using most common Python packaging tools. We recommend installing the latest stable release from PyPI with pip: $ pip install unimport","title":"Installation"},{"location":"#sources","text":"(optional: default the file directory you are in ) -> Path(\".\") You can give as many file or directory paths as you want. Usage $ unimport $ unimport example $ unimport example example1 example2 example/example.py","title":"Sources"},{"location":"#check","text":"(optional: default True ) Prints which file the unused imports are in. When the --diff , --permission and --remove flags are used, the --check flag set as False If you still want to see the results, use the --check flag. Usage $ unimport $ unimport --check $ unimport --check --diff $ unimport --check --remove","title":"Check"},{"location":"#config","text":"(optional: default the file directory you are in ) -> Path(\".\") Read configuration from PATH Usage $ unimport --config path/to/pyproject.toml","title":"Config"},{"location":"#include","text":"(optional: default \u2018\\.(py)$\u2019) file include pattern Usage $ unimport --include mypackage $ unimport --include \"mypackage|tests","title":"Include"},{"location":"#exclude","text":"(optional: default \u2018^$\u2019) file exclude pattern Usage $ unimport --exclude __init__.py $ unimport --exclude \"__init__.py|tests|.tox","title":"Exclude"},{"location":"#gitignore","text":"(optional: default False ) It\u2019s possible to skip .gitignore glob patterns. Usage $ unimport --gitignore","title":"Gitignore"},{"location":"#ignore-init","text":"(optional: default False ) Ignore the init .py file. Usage $ unimport --ignore-init","title":"Ignore init"},{"location":"#include-star-import","text":"(optional: default False ) Include star imports during scanning and refactor. Usage $ unimport --include-star-import","title":"Include star import"},{"location":"#diff","text":"(optional: default False ) Prints a diff of all the changes unimport would make to a file. Usage $ unimport -d $ unimport --diff","title":"Diff"},{"location":"#remove","text":"(optional: default False ) remove unused imports automatically. Usage $ unimport -r $ unimport --remove","title":"Remove"},{"location":"#permission","text":"(optional: default False ) Refactor permission after seeing the diff. Usage $ unimport -p $ unimport --permission","title":"Permission"},{"location":"#requirements","text":"(optional: default False ) You can automatically delete unused modules from the requirements.txt file Usage unimport --requirements to check unimport --check --requirements to check unimport --requirements --diff to check and seeing diff unimport --requirements --permission to refactor permission after seeing the diff. unimport --requirements --remove to remove automatically.","title":"Requirements"},{"location":"#typing","text":"Unimport can understand that imports are used these cases. from typing import List , Dict def test ( arg : List [ Dict ]) -> None : pass","title":"Typing"},{"location":"#string","text":"Unimport supports the following cases from typing import List , Dict def test ( arg : 'List[Dict]' ) -> None : pass from typing import List , Dict def test ( arg : \"List['Dict']\" ) -> None : pass","title":"String"},{"location":"#comments","text":"This feature is only available for python 3.8. Imports in the example below aren\u2019t flag as unused by import. from typing import Any from typing import Tuple from typing import Union def function ( a , b ): # type: (Any, str) -> Union[Tuple[None, None], Tuple[str, str]] pass For more information PEP 526 - Syntax for Variable Annotations","title":"Comments"},{"location":"#skip-import","text":"Leave \u2018# unimport: skip\u2019 or \u2018# noqa\u2019 at the end of the line to skip imports for example: import x # unimport:skip from x import ( # noqa t , y , f , r ) If version of your python is 3.8+ Unimport support multiple skip like below. It doesn\u2019t matter which line you put the comment on. from package import ( module , module1 , ) # unimport:skip or from package import ( module , # unimport:skip module1 , )","title":"Skip Import"},{"location":"#file-wide-skips","text":"To skip a file by typing # unimport: skip_file anywhere in that file for example: # unimport: skip_file import x or import x # unimport: skip_file","title":"File Wide Skips"},{"location":"#all","text":"Unimport looks at the items in the __all__ list, if it matches the imports, marks it as being used. import os __all__ = [ \"os\" ] # this import is used and umimport can understand Other supported operations, append and extend from os import * __all__ = [] __all__ . append ( \"removedirs\" ) __all__ . extend ([ \"walk\" ]) after refactoring from os import removedirs , walk __all__ = [] __all__ . append ( \"removedirs\" ) __all__ . extend ([ \"walk\" ])","title":"All"},{"location":"#command-line-options","text":"You can list many options by running unimport \u2013help usage: unimport [-h] [--check] [-c PATH] [--include include] [--exclude exclude] [--gitignore] [--ignore-init] [--include-star-import] [-d] [-r | -p] [--requirements] [-v] [sources [sources ...]] A linter, formatter for finding and removing unused import statements. positional arguments: sources Files and folders to find the unused imports. optional arguments: -h, --help show this help message and exit --check Prints which file the unused imports are in. -c PATH, --config PATH Read configuration from PATH. --include include File include pattern. --exclude exclude File exclude pattern. --gitignore Exclude .gitignore patterns. if present. --ignore-init Ignore the __init__.py file. --include-star-import Include star imports during scanning and refactor. -d, --diff Prints a diff of all the changes unimport would make to a file. -r, --remove Remove unused imports automatically. -p, --permission Refactor permission after see diff. --requirements Include requirements.txt file, You can use it with all other arguments -v, --version Prints version of unimport Get rid of all unused imports \ud83e\udd73","title":"Command line options"},{"location":"#configuring-unimport","text":"It\u2019s possible to configure unimport from pyproject.toml or setup.cfg files if you have. When reading your configurations, it gives priority to the configurations you enter from the console. For example: pyproject.toml [tool.unimport] sources = [\"path1\", \"path2\"] exclude = '__init__.py|tests/' include = 'test|test2|tests.py' gitignore = true requirements = true remove = false diff = true include_star_import = true ignore_init = true setup.cfg [unimport] sources = [\"path1\", \"path2\"] exclude = __init__.py|tests/ include = test|test2|tests.py gitignore = true requirements = true remove = false diff = true include_star_import = true ignore_init = true","title":"Configuring Unimport"},{"location":"#adding-pre-commit-plugins-to-your-project","text":"Once you have pre-commit installed , adding pre-commit plugins to your project is done with the .pre-commit-config.yaml configuration file. Add a file called .pre-commit-config.yaml to the root of your project. The pre-commit config file describes what repositories and hooks are installed. repos : - repo : https://github.com/hakancelik96/unimport rev : stable hooks : - id : unimport args : [ --remove , --requirements , --include-star-import , --ignore-init , --gitignore ]","title":"Adding pre-commit plugins to your project"},{"location":"authors/","text":"Authors \u00b6 Hakan \u00c7elik ( @hakancelik96 ) hakancelik96@outlook.com Batuhan Ta\u015fkaya ( @isidentical ) isidentical@gmail.com G\u00f6kmen G\u00f6rgen ( @gkmngrgn ) gkmngrgn@gmail.com Contributors \u00b6 Furkan \u00d6nder ( @furkanonder ) furkanonder@protonmail.com Hadi Alqattan ( @hadialqattan ) alqattanhadizaki@gmail.com I\u015f\u0131k Kaplan ( @isik-kaplan ) isik.kaplan@outlook.com Sema Karata\u015f ( @semakaratas ) semakaratas@outlook.com.tr S\u00fcmeyye Boynukara ( @sumeyyeboynukara ) sumeyyeboynukara@gmail.com","title":"Authors"},{"location":"authors/#authors","text":"Hakan \u00c7elik ( @hakancelik96 ) hakancelik96@outlook.com Batuhan Ta\u015fkaya ( @isidentical ) isidentical@gmail.com G\u00f6kmen G\u00f6rgen ( @gkmngrgn ) gkmngrgn@gmail.com","title":"Authors"},{"location":"authors/#contributors","text":"Furkan \u00d6nder ( @furkanonder ) furkanonder@protonmail.com Hadi Alqattan ( @hadialqattan ) alqattanhadizaki@gmail.com I\u015f\u0131k Kaplan ( @isik-kaplan ) isik.kaplan@outlook.com Sema Karata\u015f ( @semakaratas ) semakaratas@outlook.com.tr S\u00fcmeyye Boynukara ( @sumeyyeboynukara ) sumeyyeboynukara@gmail.com","title":"Contributors"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. 0.8.4 - 06/26/2021 \u00b6 Fix emoji issues by @hakancelik96 [0.8.0] - 09/02/2021 \u00b6 Temporarily drop support for duplicate imports. by @isidentical [0.7.4] - 19/02/2021 \u00b6 \ud83d\udc1e Fix list_paths in utils by @hakancelik96 [0.7.3] - 14/02/2021 \u00b6 \ud83d\udcaa Add --ignore-init flag by @hakancelik96 [0.7.2] - 31/January/2021 \u00b6 \ud83d\udcaa Python3.9 Support by @hakancelik96 [0.7.1] - 1/January/2021/ \u00b6 \ud83d\udc1e Fix by @hakancelik96 #127 [0.7.0] - 26/December/2020 \u00b6 \ud83d\udc8a %15 performance increase & remove show-error flag by @hakancelik96 \ud83d\udcaa Star import more accurate suggestion by @hakancelik96 120 removed to implement it more accurately, later. \u00b6 \ud83d\udc1e Fix: scanner by @hakancelik96 \ud83d\udc1e & \ud83d\udcaa & \ud83d\udc8a Fix: #150 by @hakancelik96 Configuration Bug Fix ( Configuration priority, reading and merge ) %136 - %150 performance increase [0.6.8] - 2/December/2020 \u00b6 \ud83d\udc1e Fix: Extra type check on utils.is_std , #148 (#149) by @isik-kaplan \ud83d\udc1e Fix: import skip by @hakancelik96 [0.6.6] - 24/October/2020 \u00b6 \ud83d\udc1e Fix: call attribute scanner by @hakancelik96 \ud83d\udc1e Fix: requirements feature & star import suggestion by @hakancelik96 \ud83d\udcaa Support multiline skip import only py3.8 and plus by @hakancelik96 \ud83d\udc1e Fix: Initial imports from sys.modules by @hakancelik96 \ud83d\udc1e Fix: import and name matcher by @hakancelik96 \ud83d\udc1e Fix: type comment by @hakancelik96 \ud83d\udcaa Support type variable by @hakancelik96 \ud83d\udc1e Fix same line duplicates by @hakancelik96 \ud83d\udcaa Support Windows OS coloring and encoding by @hadialqattan [0.3.0] - 22/September/2020 \u00b6 \ud83d\udc1e\ud83d\udc8a Fix, improve: Names, Imports and star suggestion by @hakancelik96 \ud83d\udcaa\ud83d\udc8a Configuration extend and refactoring by @hakancelik96 \ud83d\udcaa\ud83d\udc8a General refactoring by @hakancelik96 Support append and extend __all__ list Star import suggestions improved \ud83d\udc1e Fix: Unnecessary refactoring by @hakancelik96 \ud83d\udcaa Support .gitignore exclude patterns by @hadialqattan \ud83d\udc8a Optimize Python >=3.8 type comments support method by @hadialqattan \ud83d\udcaa Improve test coverage by @hadialqattan \ud83d\udcaa Support async def by @hakancelik96 [0.2.10] - 6/September/2020 \u00b6 \ud83d\udc1e Fix: vertical style issue by @hadialqattan python from foo import ( Foo, Bar, FooBar, ) Foo, Bar \ud83d\udc1e Fix: More than one star import exist on the same file by @hakancelik96. \ud83d\udcaa Getting rid of some bad practice & \ud83d\udc1e Fix: pre-commit bug by @hakancelik96 [0.2.9] - 1/September/2020 \u00b6 \ud83d\udd25 Fix: Double underscore in builtins imports by @hakancelik96 \ud83d\udcaa Support for exit code and add some enhancement by @furkanonder \ud83d\udd25 Fix: incorrect matching import and name by @hakancelik96 [0.2.8] - 27/July/2020 \u00b6 \ud83d\udcaa Support: file-wide skips by @hakancelik96 Now, you can skip a file by typing # unimport: skip_file anywhere in that file. \ud83d\udd25 Fix: preserve import styles \ud83d\udcaa Support: requirements.txt file by @hakancelik96 Now, You can automatically delete unused modules from the requirements.txt file ( unimport --requirements --remove ), see the difference ( unimport --requirements --diff ), delete it by requesting permission ( unimport --requirements --permission ), or just check ( unimport --requirements ). \ud83d\udd25 Fix: match error between import name and name by @hakancelik96 \ud83d\udcaa Support for type hints (#58) by @hakancelik96 & string typing @isidentical python from typing import List, TYPE_TEST test: 'List[TYPE_TEST]' python from typing import List, TYPE_TEST test: \"List['TYPE_TEST']\" \ud83d\udd25 fix: get_suggestion_modules function fix for __all__ name when import is star [0.2.7] - 9/June/2020 \u00b6 \ud83d\udd25 If imports inside the try ... except ImportError, ModuleNotFoundError block, skip it. ( #46 ) by @hakancelik96 and @isidentical \ud83d\udd25 --show-error flag add by @hakancelik96 \ud83d\udc1efix: Skip star imports when the --include-star-import flag is not used by @hakancelik96 \ud83d\udc1efix: finding functions during scanning by @hakancelik96 \ud83d\udcaa #noqa comment support to skip import (#48) by @hakancelik96 \ud83d\udcaa typing imports used in typing comments support only python3.8 (#49) by @hakancelik96 Set default of permission flag as yes (#51) by @semakaratas Fix: \u2018Ignore imports that shadow builtin names\u2019 \ud83d\udc1e \ud83d\udcaa \ud83e\uddea (#45 & #47) by @hakancelik96 [0.2.6.2] - 23/May/2020 \u00b6 \ud83d\udc1e Config [0.2.6.1] - 22/May/2020 \u00b6 PR: 0.2.6 by @hakancelik96 \ud83d\udcaa --include-star-import command add Include star imports during scanning and refactor. \ud83c\udf08 color_diff add It shows the difference between source and refactor better. \ud83d\udc1e All builtins names received during the scan have been fixed. Builtins names will no longer be offered as suggestions for star import. \ud83d\udc1e If there is no unused import, the refactor error has been fixed. \ud83d\udcaa Import skip feature has been added. Leave \u2018#unimport: skip\u2019 at the end of the line to skip imports with some rare cases. for example: try : import django #unimport:skip except ImportError : print ( \"install django\" ) \ud83d\udcaa Added support for the rare case of all . for example: from codeop import compile_command __all__ = [ \"compile_command\" ] Thanks to this feature, we take the values \u200b\u200bin the __all__ list and see if there is any matching import statements. If there isn\u2019t, this import is unused import. \ud83d\udcaa Support exclude & include config with regex by @hakancelik96 After this feature, we can write the file include and exclude pattern setting with regex in the console and in the configuration files. \ud83d\udc1e Show, check and congratulations messages in _ main by @hakancelik96 \ud83d\udc1e \u2013include-star-import command refactor & scan by @hakancelik96 \ud83d\udc1e _list_paths in session by @hakancelik96 v0.2.61 [0.2.5] - 16/May/2020 \u00b6 0.2.5 by @hakancelik96 \ud83d\udcaa Refactor code rewrite using libcst. \ud83d\udc1e Refactor bugs fix. \ud83e\uddea Comma rare case support & test. \ud83d\udcaa pre-commit add & support \ud83d\udc1e Add Sytranx Error Catcher [0.2.4] - 17/April/2020 \u00b6 \ud83d\udcaa As import refactor support by @hakancelik96 \ud83d\udcaa Duplicate detect and refactor support by @hakancelik96 [0.2.2] - 4/April/2020 \u00b6 \ud83d\udc1e Fix: Scan & Config - Add test to default exlude by @hakancelik96 [0.2.1] - 8/March/2020 \u00b6 \ud83d\udcaa from x import * support issue; #19 PR; #21 by @hakancelik96 [0.2.0] - 19/Jan/2020 \u00b6 \ud83d\udcaa Argparse support. implement an initial arg parser by @gkmngrgn argparse support by @gkmngrgn argparse (#4) by @isidentical Arguments \u201c-w\u201d / \u201c\u2013write\u201d parameter is fixed in this PR (#9) by @gkmngrgn #12 diff option & and overwrite permission add by @hakancelik96 #12 -dw add by @hakancelik96 #12 bug fix & Some functions have been moved to the corresponding files @hakancelik96 \u2013version add by @hakancelik96 Console Argument (#17) by @hakancelik96 \ud83d\udc1e Tests fix_multiple_problems_at_once_action.py by @hakancelik96 test_overwrite source_expected path bug fix by @hakancelik96 \ud83d\udcaa Configuration example_configuration add by @hakancelik96 #8 & glob configuration by @hakancelik96 ignore config name change as exclude by @hakancelik96 remove .unimport.cfg by @hakancelik96 find_config bug fix & console config argument bug fix by @hakancelik96 \ud83d\udcaa Lib2to3 support Initial lib2to3 refactor by @isidentical add support for name binding by @isidentical adapt testing suite by @isidentical \ud83d\udc1e Bug Fix setup.cfg bug fix & catch error in detect by @hakancelik96 get_files bug fix by @hakancelik96 support local imports by @hakancelik96 and @isidentical \ud83d\udc8a Optimization balamir by @hakancelik96 and @isidentical \ud83d\udcaa API Support General API Cleanup by @isidentical [0.1.3] - 31/Oct/2019 \u00b6 \ud83d\udcaa pyproject.toml support \ud83d\udcaa setup.cfg support \ud83e\uddea test written [0.1.0] - 27/Sep/2019 \u00b6 \ud83c\udf89 Some class and function name and position changed. \ud83c\udf89 Future module added to the ignore list. \ud83d\udc1e Blank python file error fix. Default .unimport.cfg and extra_config add The new usage style unimport to scan from current path [0.0.3] - 22/Sep/2019 \u00b6 \ud83d\udc1e Op system bug fix Linux and win \ud83d\udc1e File and folders features fix \ud83d\udcaa Add warning message if no enter any path No paths given \u2018Usage; unimport {source_file_or_directory}\u2019\u201c [0.0.2] - 21/Sep/2019 \u00b6 \ud83d\udc1e find module bug fix; For example; module: inspect, name; inspect.getsource; result unused import = inspect that is the wrong result [0.0.1] - 19/Sep/2019 \u00b6 unimport {source_file_or_directory} .unimport.cfg \u2018type the names of files or folders that you do not want to scan.\u2019 Does not replace files only shows results.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file.","title":"Changelog"},{"location":"changelog/#084-06262021","text":"Fix emoji issues by @hakancelik96","title":"0.8.4 - 06/26/2021"},{"location":"changelog/#080-09022021","text":"Temporarily drop support for duplicate imports. by @isidentical","title":"[0.8.0] - 09/02/2021"},{"location":"changelog/#074-19022021","text":"\ud83d\udc1e Fix list_paths in utils by @hakancelik96","title":"[0.7.4] - 19/02/2021"},{"location":"changelog/#073-14022021","text":"\ud83d\udcaa Add --ignore-init flag by @hakancelik96","title":"[0.7.3] - 14/02/2021"},{"location":"changelog/#072-31january2021","text":"\ud83d\udcaa Python3.9 Support by @hakancelik96","title":"[0.7.2] - 31/January/2021"},{"location":"changelog/#071-1january2021","text":"\ud83d\udc1e Fix by @hakancelik96 #127","title":"[0.7.1] - 1/January/2021/"},{"location":"changelog/#070-26december2020","text":"\ud83d\udc8a %15 performance increase & remove show-error flag by @hakancelik96 \ud83d\udcaa Star import more accurate suggestion by @hakancelik96","title":"[0.7.0] - 26/December/2020"},{"location":"changelog/#120-removed-to-implement-it-more-accurately-later","text":"\ud83d\udc1e Fix: scanner by @hakancelik96 \ud83d\udc1e & \ud83d\udcaa & \ud83d\udc8a Fix: #150 by @hakancelik96 Configuration Bug Fix ( Configuration priority, reading and merge ) %136 - %150 performance increase","title":"120 removed to implement it more accurately, later."},{"location":"changelog/#068-2december2020","text":"\ud83d\udc1e Fix: Extra type check on utils.is_std , #148 (#149) by @isik-kaplan \ud83d\udc1e Fix: import skip by @hakancelik96","title":"[0.6.8] - 2/December/2020"},{"location":"changelog/#066-24october2020","text":"\ud83d\udc1e Fix: call attribute scanner by @hakancelik96 \ud83d\udc1e Fix: requirements feature & star import suggestion by @hakancelik96 \ud83d\udcaa Support multiline skip import only py3.8 and plus by @hakancelik96 \ud83d\udc1e Fix: Initial imports from sys.modules by @hakancelik96 \ud83d\udc1e Fix: import and name matcher by @hakancelik96 \ud83d\udc1e Fix: type comment by @hakancelik96 \ud83d\udcaa Support type variable by @hakancelik96 \ud83d\udc1e Fix same line duplicates by @hakancelik96 \ud83d\udcaa Support Windows OS coloring and encoding by @hadialqattan","title":"[0.6.6] - 24/October/2020"},{"location":"changelog/#030-22september2020","text":"\ud83d\udc1e\ud83d\udc8a Fix, improve: Names, Imports and star suggestion by @hakancelik96 \ud83d\udcaa\ud83d\udc8a Configuration extend and refactoring by @hakancelik96 \ud83d\udcaa\ud83d\udc8a General refactoring by @hakancelik96 Support append and extend __all__ list Star import suggestions improved \ud83d\udc1e Fix: Unnecessary refactoring by @hakancelik96 \ud83d\udcaa Support .gitignore exclude patterns by @hadialqattan \ud83d\udc8a Optimize Python >=3.8 type comments support method by @hadialqattan \ud83d\udcaa Improve test coverage by @hadialqattan \ud83d\udcaa Support async def by @hakancelik96","title":"[0.3.0] - 22/September/2020"},{"location":"changelog/#0210-6september2020","text":"\ud83d\udc1e Fix: vertical style issue by @hadialqattan python from foo import ( Foo, Bar, FooBar, ) Foo, Bar \ud83d\udc1e Fix: More than one star import exist on the same file by @hakancelik96. \ud83d\udcaa Getting rid of some bad practice & \ud83d\udc1e Fix: pre-commit bug by @hakancelik96","title":"[0.2.10] - 6/September/2020"},{"location":"changelog/#029-1september2020","text":"\ud83d\udd25 Fix: Double underscore in builtins imports by @hakancelik96 \ud83d\udcaa Support for exit code and add some enhancement by @furkanonder \ud83d\udd25 Fix: incorrect matching import and name by @hakancelik96","title":"[0.2.9] - 1/September/2020"},{"location":"changelog/#028-27july2020","text":"\ud83d\udcaa Support: file-wide skips by @hakancelik96 Now, you can skip a file by typing # unimport: skip_file anywhere in that file. \ud83d\udd25 Fix: preserve import styles \ud83d\udcaa Support: requirements.txt file by @hakancelik96 Now, You can automatically delete unused modules from the requirements.txt file ( unimport --requirements --remove ), see the difference ( unimport --requirements --diff ), delete it by requesting permission ( unimport --requirements --permission ), or just check ( unimport --requirements ). \ud83d\udd25 Fix: match error between import name and name by @hakancelik96 \ud83d\udcaa Support for type hints (#58) by @hakancelik96 & string typing @isidentical python from typing import List, TYPE_TEST test: 'List[TYPE_TEST]' python from typing import List, TYPE_TEST test: \"List['TYPE_TEST']\" \ud83d\udd25 fix: get_suggestion_modules function fix for __all__ name when import is star","title":"[0.2.8] - 27/July/2020"},{"location":"changelog/#027-9june2020","text":"\ud83d\udd25 If imports inside the try ... except ImportError, ModuleNotFoundError block, skip it. ( #46 ) by @hakancelik96 and @isidentical \ud83d\udd25 --show-error flag add by @hakancelik96 \ud83d\udc1efix: Skip star imports when the --include-star-import flag is not used by @hakancelik96 \ud83d\udc1efix: finding functions during scanning by @hakancelik96 \ud83d\udcaa #noqa comment support to skip import (#48) by @hakancelik96 \ud83d\udcaa typing imports used in typing comments support only python3.8 (#49) by @hakancelik96 Set default of permission flag as yes (#51) by @semakaratas Fix: \u2018Ignore imports that shadow builtin names\u2019 \ud83d\udc1e \ud83d\udcaa \ud83e\uddea (#45 & #47) by @hakancelik96","title":"[0.2.7] - 9/June/2020"},{"location":"changelog/#0262-23may2020","text":"\ud83d\udc1e Config","title":"[0.2.6.2] - 23/May/2020"},{"location":"changelog/#0261-22may2020","text":"PR: 0.2.6 by @hakancelik96 \ud83d\udcaa --include-star-import command add Include star imports during scanning and refactor. \ud83c\udf08 color_diff add It shows the difference between source and refactor better. \ud83d\udc1e All builtins names received during the scan have been fixed. Builtins names will no longer be offered as suggestions for star import. \ud83d\udc1e If there is no unused import, the refactor error has been fixed. \ud83d\udcaa Import skip feature has been added. Leave \u2018#unimport: skip\u2019 at the end of the line to skip imports with some rare cases. for example: try : import django #unimport:skip except ImportError : print ( \"install django\" ) \ud83d\udcaa Added support for the rare case of all . for example: from codeop import compile_command __all__ = [ \"compile_command\" ] Thanks to this feature, we take the values \u200b\u200bin the __all__ list and see if there is any matching import statements. If there isn\u2019t, this import is unused import. \ud83d\udcaa Support exclude & include config with regex by @hakancelik96 After this feature, we can write the file include and exclude pattern setting with regex in the console and in the configuration files. \ud83d\udc1e Show, check and congratulations messages in _ main by @hakancelik96 \ud83d\udc1e \u2013include-star-import command refactor & scan by @hakancelik96 \ud83d\udc1e _list_paths in session by @hakancelik96 v0.2.61","title":"[0.2.6.1] - 22/May/2020"},{"location":"changelog/#025-16may2020","text":"0.2.5 by @hakancelik96 \ud83d\udcaa Refactor code rewrite using libcst. \ud83d\udc1e Refactor bugs fix. \ud83e\uddea Comma rare case support & test. \ud83d\udcaa pre-commit add & support \ud83d\udc1e Add Sytranx Error Catcher","title":"[0.2.5] - 16/May/2020"},{"location":"changelog/#024-17april2020","text":"\ud83d\udcaa As import refactor support by @hakancelik96 \ud83d\udcaa Duplicate detect and refactor support by @hakancelik96","title":"[0.2.4] - 17/April/2020"},{"location":"changelog/#022-4april2020","text":"\ud83d\udc1e Fix: Scan & Config - Add test to default exlude by @hakancelik96","title":"[0.2.2] - 4/April/2020"},{"location":"changelog/#021-8march2020","text":"\ud83d\udcaa from x import * support issue; #19 PR; #21 by @hakancelik96","title":"[0.2.1] - 8/March/2020"},{"location":"changelog/#020-19jan2020","text":"\ud83d\udcaa Argparse support. implement an initial arg parser by @gkmngrgn argparse support by @gkmngrgn argparse (#4) by @isidentical Arguments \u201c-w\u201d / \u201c\u2013write\u201d parameter is fixed in this PR (#9) by @gkmngrgn #12 diff option & and overwrite permission add by @hakancelik96 #12 -dw add by @hakancelik96 #12 bug fix & Some functions have been moved to the corresponding files @hakancelik96 \u2013version add by @hakancelik96 Console Argument (#17) by @hakancelik96 \ud83d\udc1e Tests fix_multiple_problems_at_once_action.py by @hakancelik96 test_overwrite source_expected path bug fix by @hakancelik96 \ud83d\udcaa Configuration example_configuration add by @hakancelik96 #8 & glob configuration by @hakancelik96 ignore config name change as exclude by @hakancelik96 remove .unimport.cfg by @hakancelik96 find_config bug fix & console config argument bug fix by @hakancelik96 \ud83d\udcaa Lib2to3 support Initial lib2to3 refactor by @isidentical add support for name binding by @isidentical adapt testing suite by @isidentical \ud83d\udc1e Bug Fix setup.cfg bug fix & catch error in detect by @hakancelik96 get_files bug fix by @hakancelik96 support local imports by @hakancelik96 and @isidentical \ud83d\udc8a Optimization balamir by @hakancelik96 and @isidentical \ud83d\udcaa API Support General API Cleanup by @isidentical","title":"[0.2.0] - 19/Jan/2020"},{"location":"changelog/#013-31oct2019","text":"\ud83d\udcaa pyproject.toml support \ud83d\udcaa setup.cfg support \ud83e\uddea test written","title":"[0.1.3] - 31/Oct/2019"},{"location":"changelog/#010-27sep2019","text":"\ud83c\udf89 Some class and function name and position changed. \ud83c\udf89 Future module added to the ignore list. \ud83d\udc1e Blank python file error fix. Default .unimport.cfg and extra_config add The new usage style unimport to scan from current path","title":"[0.1.0] - 27/Sep/2019"},{"location":"changelog/#003-22sep2019","text":"\ud83d\udc1e Op system bug fix Linux and win \ud83d\udc1e File and folders features fix \ud83d\udcaa Add warning message if no enter any path No paths given \u2018Usage; unimport {source_file_or_directory}\u2019\u201c","title":"[0.0.3] - 22/Sep/2019"},{"location":"changelog/#002-21sep2019","text":"\ud83d\udc1e find module bug fix; For example; module: inspect, name; inspect.getsource; result unused import = inspect that is the wrong result","title":"[0.0.2] - 21/Sep/2019"},{"location":"changelog/#001-19sep2019","text":"unimport {source_file_or_directory} .unimport.cfg \u2018type the names of files or folders that you do not want to scan.\u2019 Does not replace files only shows results.","title":"[0.0.1] - 19/Sep/2019"},{"location":"contributing/","text":"Development and Contributing \u00b6 Issue \u00b6 To make an improvement, add a new feature or anything else, please open a issue first. Good first issues are the issues that you can quickly solve, we recommend you take a look. Good first issue Fork Repository \u00b6 fork the unimport. Clone Repository \u00b6 $ git clone git@github.com:<USERNAME>/unimport.git $ cd unimport Setup Branch \u00b6 git checkout -b i { your issue number } How to Update My Local Repository \u00b6 $ git remote add upstream git@github.com:hakancelik96/unimport.git $ git fetch upstream # or git fetch --all $ git rebase upstream/master Testing \u00b6 Firstly make sure you have py3.6, py3.7, and py3.8 python versions installed on your system. After typing your codes, you should run the tests by typing the following command. $ python3.8 -m pip install tox $ tox If all tests pass. The final step \u00b6 After adding a new feature or fixing a bug please report your change to CHANGELOG.md and write your name, GitHub address, and email in the AUTHORS.md file in alphabetical order. Commit Messages \u00b6 If you want, you can use the emoji about the commit message you will throw, this can help us better understand the change you have made and also it is fun. When you make any support commit; \ud83d\udcaa When you make any tests commit; \ud83e\uddea When you make any fix commit; \ud83d\udc1e When you make any optimization commit; \ud83d\udc8a when you make any new feature commit; \ud83d\udd25 License \u00b6 Unimport is MIT licensed, as found in the LICENSE file.","title":"Contributing"},{"location":"contributing/#development-and-contributing","text":"","title":"Development and Contributing"},{"location":"contributing/#issue","text":"To make an improvement, add a new feature or anything else, please open a issue first. Good first issues are the issues that you can quickly solve, we recommend you take a look. Good first issue","title":"Issue"},{"location":"contributing/#fork-repository","text":"fork the unimport.","title":"Fork Repository"},{"location":"contributing/#clone-repository","text":"$ git clone git@github.com:<USERNAME>/unimport.git $ cd unimport","title":"Clone Repository"},{"location":"contributing/#setup-branch","text":"git checkout -b i { your issue number }","title":"Setup Branch"},{"location":"contributing/#how-to-update-my-local-repository","text":"$ git remote add upstream git@github.com:hakancelik96/unimport.git $ git fetch upstream # or git fetch --all $ git rebase upstream/master","title":"How to Update My Local Repository"},{"location":"contributing/#testing","text":"Firstly make sure you have py3.6, py3.7, and py3.8 python versions installed on your system. After typing your codes, you should run the tests by typing the following command. $ python3.8 -m pip install tox $ tox If all tests pass.","title":"Testing"},{"location":"contributing/#the-final-step","text":"After adding a new feature or fixing a bug please report your change to CHANGELOG.md and write your name, GitHub address, and email in the AUTHORS.md file in alphabetical order.","title":"The final step"},{"location":"contributing/#commit-messages","text":"If you want, you can use the emoji about the commit message you will throw, this can help us better understand the change you have made and also it is fun. When you make any support commit; \ud83d\udcaa When you make any tests commit; \ud83e\uddea When you make any fix commit; \ud83d\udc1e When you make any optimization commit; \ud83d\udc8a when you make any new feature commit; \ud83d\udd25","title":"Commit Messages"},{"location":"contributing/#license","text":"Unimport is MIT licensed, as found in the LICENSE file.","title":"License"},{"location":"faq/","text":"FAQ \u00b6 Differences between Autoflake and Unimport \u00b6 Autoflake doesn\u2019t always remove the duplicate imports when they are on separate lines. Example: from os import walk from os import walk use ( walk ) For this snippet, autoflake doesn\u2019t change anything, while unimport detects and removes the first walk import. Autoflake replaces unused imports in compound statements with pass , while unimport detects and imports inside compound statements, if it detects that you are expecting an ImportError , it doesn\u2019t remove that particular import. try : from x import y except ImportError : ... For this snippet autoflake replaces the import statement with pass. , while unimport leaves it as is. Autoflake is not accurate when it comes to star import expansions, while unimport can detect and expand them accurately. from math import * use ( RANDOM_VAR ) Running autoflake with \u2013expand-star-import flag on the snippet above turns it into from math import RANDOM_VAR while unimport simple removes the math import because it is not used. Autoflake doesn\u2019t work with multiple star imports, while unimport does. from math import _ from os import _ use(walk, cos) Running unimport on the above snippet with \u2013include-star-imports flag produces the correct output. from math import cos from os import walk use ( walk , cos ) while autoflake simply ignores them. Our outputs are more useful, try using our \u2013check, \u2013diff or \u2013permission commands. Performance \u00b6 Unimport < 0.6.8 was much slower than Autoflake == 1.4 (current latest version as of writing this) but Unimport > 0.6.8 is slightly faster. Reasons to choose autoflake \u00b6 It is faster. When tested, autoflake is 1-4x faster on average. (Unimport is slightly faster now) It removes unused variables which unimport doesn\u2019t support, and is not planning to. Has a feature that removes duplicate keys on objects. Reasons to choose unimport \u00b6 It does more static analysis to increse the accuracy of choosing the correct imports to remove. Can handle star imports more accurately.( https://github.com/myint/autoflake/pull/18 describes their approach) Works with multiple star imports. Removes duplicate imports. Has skip_file feature that allows one to skip an entire file. Has a feature to remove the unused imports from requirements file. Allows configuration via pyproject.toml and setup.cfg files. Overall \u00b6 Even though unimport and autoflake has features that are similar, they are not designed to do the same thing. When you are including one to your project, it is a good idea to know what your needs are, and decide accordingly.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#differences-between-autoflake-and-unimport","text":"Autoflake doesn\u2019t always remove the duplicate imports when they are on separate lines. Example: from os import walk from os import walk use ( walk ) For this snippet, autoflake doesn\u2019t change anything, while unimport detects and removes the first walk import. Autoflake replaces unused imports in compound statements with pass , while unimport detects and imports inside compound statements, if it detects that you are expecting an ImportError , it doesn\u2019t remove that particular import. try : from x import y except ImportError : ... For this snippet autoflake replaces the import statement with pass. , while unimport leaves it as is. Autoflake is not accurate when it comes to star import expansions, while unimport can detect and expand them accurately. from math import * use ( RANDOM_VAR ) Running autoflake with \u2013expand-star-import flag on the snippet above turns it into from math import RANDOM_VAR while unimport simple removes the math import because it is not used. Autoflake doesn\u2019t work with multiple star imports, while unimport does. from math import _ from os import _ use(walk, cos) Running unimport on the above snippet with \u2013include-star-imports flag produces the correct output. from math import cos from os import walk use ( walk , cos ) while autoflake simply ignores them. Our outputs are more useful, try using our \u2013check, \u2013diff or \u2013permission commands.","title":"Differences between Autoflake and Unimport"},{"location":"faq/#performance","text":"Unimport < 0.6.8 was much slower than Autoflake == 1.4 (current latest version as of writing this) but Unimport > 0.6.8 is slightly faster.","title":"Performance"},{"location":"faq/#reasons-to-choose-autoflake","text":"It is faster. When tested, autoflake is 1-4x faster on average. (Unimport is slightly faster now) It removes unused variables which unimport doesn\u2019t support, and is not planning to. Has a feature that removes duplicate keys on objects.","title":"Reasons to choose autoflake"},{"location":"faq/#reasons-to-choose-unimport","text":"It does more static analysis to increse the accuracy of choosing the correct imports to remove. Can handle star imports more accurately.( https://github.com/myint/autoflake/pull/18 describes their approach) Works with multiple star imports. Removes duplicate imports. Has skip_file feature that allows one to skip an entire file. Has a feature to remove the unused imports from requirements file. Allows configuration via pyproject.toml and setup.cfg files.","title":"Reasons to choose unimport"},{"location":"faq/#overall","text":"Even though unimport and autoflake has features that are similar, they are not designed to do the same thing. When you are including one to your project, it is a good idea to know what your needs are, and decide accordingly.","title":"Overall"}]}